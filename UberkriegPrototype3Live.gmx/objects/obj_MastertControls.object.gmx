<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate, key config, colours, animation
/*
this object coltrols global stuff:
F12: full screen
Global cursor animation
*/

depth = UI_DEPTH_CURSOR;

//mode spesific thing
global.mode = "Start Game";
//this variable is used to animate cursors 
global.cursorFrame = 1;
global.cursorFrameIndex = 1;
global.cursorAlpha = 0;
alarm[0] = 2 ;
//this cariable used to animate anything that blinks
global.blinking = true;
alarm[1] = 2 ;
//waves and glow animation
global.wave = 100;
global.wave_max = 100;
global.glow = global.wave/global.wave_max; 
wave_switch = false;
alarm[2]= 1;
//smoke animation
global.smoke_frame = 0; // alarm 3 , 0 ~ 5
global.smoke_alpha = 0.5;
alarm[3] = 6;
//star dance
global.star_dance = 0;
alarm[4] = 1;


//Key juice variables
global.cursorKey_startspeed   = 15;
global.cursorKey_delay        = 15;
global.cursorKey_accel        =  1;
global.cursorKey_topspeed     =  3;
global.cursorKey_popFrame     =  6;
global.cursorKey_sfx = sfx_TypeWritterKey_1 ;

global.exit_delay = 6;

// Key colours
global.c_uiWhite = make_colour_rgb(250,250,250);



//Dynamic Text: set colour, font, &amp; align
global.c_uiWhite    = make_colour_rgb(200,200,200);
global.c_uiBaseGrey = make_colour_rgb(44,41,38);
global.c_uiLineGrey = make_colour_rgb(100,100,100);
global.c_uiGold     = make_colour_rgb(218,191,112);

draw_set_font(ft_AuroraEx);
draw_set_colour(global.c_uiWhite);
draw_set_halign(fa_left);

global.window_size = 1;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller Button config *old
/*
//Contoller button config, defaults to Xbox360 controller
global.GP_A = gp_face1;
global.GP_B = gp_face2;
global.GP_X = gp_face3;
global.GP_Y = gp_face4;

global.GP_SL = gp_shoulderl;
global.GP_SR = gp_shoulderr;
global.GP_TL = gp_shoulderlb;
global.GP_TR = gp_shoulderrb;

global.GP_Select = gp_select;
global.GP_Start  = gp_start;

global.Dpad_Up    = gp_padu;
global.Dpad_Down  = gp_padd;
global.Dpad_Left  = gp_padl;
global.Dpad_Right = gp_padr;

global.GP_Stick_L = gp_stickl; //left stick button (push in)
global.GP_Stick_R = gp_stickr; //right stick button

global.GP_Stick_LH = gp_axislh; //Left anaolog stick vertical
global.GP_Stick_LV = gp_axislv; //left analoug stick horizontal
global.GP_Stick_RH = gp_axisrh; 
global.GP_Stick_RV = gp_axisrv;

//Keyboard Config
global.KB_A = ord("Z");
global.KB_B = ord("X");
global.KB_X = ord("A");
global.KB_Y = ord("S");

global.KB_Start  = vk_enter;
global.KB_Select = vk_shift;

global.KB_L1 = ord("D");
global.KB_L2 = ord("F");
global.KB_R1 = ord("C");
global.KB_R1 = ord("V");
*/


//input binding
//global.keyCONFIRM   = ord("Z");
//global.keyCANCEL    = ord("X");

//global.keyRADIO     = vk_space;
//global.keyAUX       = ord("c");

//global.keyUP        = vk_up    or gp_padu;
//global.keyDOWN      = vk_down  or gp_padd;
//global.keyLEFT      = vk_left  or gp_padl;
//global.keyRIGHT     = vk_right or gp_padr;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anaolougue stick input settings

//action type
global.Lstick_type = 1; // for nav (like arrow keys)
global.Rstick_type = 2; // for fast move 0 fo unused
//invert axix
global.Lstick_invert = 1;
global.Rstick_invert = 1;
//switch hprizontal with Vertical axsis
global.Lstick_switch = false;
global.Rstick_switch = false;

//set deadzone
gamepad_set_axis_deadzone(0,0.2)

//type 1 - nav
global.snav_h = 0;
global.snav_v = 0;

global.snav_thresh = 0.5;

global.snav_up_hold = false;
global.snav_up_pressed = false;
global.snav_up_released = false;

global.snav_down_hold = false;
global.snav_down_pressed = false;
global.snav_down_released = false;

global.snav_left_hold = false;
global.snav_left_pressed = false;
global.snav_left_released = false;

global.snav_right_hold = false;
global.snav_right_pressed = false;
global.snav_right_released = false;

//type 2 - map 
global.smap_h = 0;
global.smap_v = 0;
global.smap_speed = 24;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard &amp; Controller input config

//game pad input config defalts, mapped to Xbox360  
//gamepad inputs                    //keybard inputs
global.gpi_up     = gp_padu;        global.kbi_up       = ord("W");    //always take arrow keys (check in steps)
global.gpi_down   = gp_padd;        global.kbi_down     = ord("S"); 
global.gpi_left   = gp_padl;        global.kbi_left     = ord("A");
global.gpi_right  = gp_padr;        global.kbi_right    = ord("D");

global.gpi_A      = gp_face1;       global.kbi_A        = ord("Z"); //always take enter key
global.gpi_B      = gp_face2;       global.kbi_B        = ord("X"); //always take back space
global.gpi_X      = gp_face3;       global.kbi_X        = ord("C");
global.gpi_Y      = gp_face4;       global.kbi_Y        = vk_space;

global.gpi_L1     = gp_shoulderl;   global.kbi_L1       = ord("{"); //not sure if this will work
global.gpi_L2     = gp_shoulderlb;  global.kbi_L2       = ord("}");
global.gpi_R1     = gp_shoulderr;   global.kbi_R1       = ord("&lt;");
global.gpi_R2     = gp_shoulderrb;  global.kbi_R2       = ord("&gt;");

global.gpi_start  = gp_start;       global.kbi_start    = ord ("V");
global.gpi_select = gp_select;      global.kbi_select   = ord ("B");

global.gpi_LSB    = gp_stickl;      global.kbi_LSB      = ord("N"); // left stick buttion
global.gpi_RSB    = gp_stickr;      global.kbi_RSB      = ord("M"); // right stick button

///Keyboard and controller Listiner
global.ip_nav = 0; //only one nav input at once, to be stored in this variable.

global.ip_up_hold     = false; //navigation
global.ip_up_pressed  = false;
global.ip_up_released = false;
global.ip_down_hold     = false;
global.ip_down_pressed  = false;
global.ip_down_released = false;
global.ip_left_hold     = false;
global.ip_left_pressed  = false;
global.ip_left_released = false;
global.ip_right_hold     = false;
global.ip_right_pressed  = false;
global.ip_right_released = false;

global.ip_A_hold     = false; //confirm
global.ip_A_pressed  = false; 
global.ip_A_released = false;
global.ip_B_hold     = false; //cancel
global.ip_B_pressed  = false;
global.ip_B_released = false;
global.ip_X_hold     = false; //intel
global.ip_X_pressed  = false;
global.ip_X_released = false;
global.ip_Y_hold     = false; //Radio check
global.ip_Y_pressed  = false;
global.ip_Y_released = false;

global.ip_L1_hold     = false; //next active unit, next page
global.ip_L1_pressed  = false;
global.ip_L1_released = false;
global.ip_L2_hold     = false;
global.ip_L2_pressed  = false;
global.ip_L2_released = false;
global.ip_R1_hold     = false;
global.ip_R1_pressed  = false;
global.ip_R1_released = false; //next enemy unit
global.ip_R2_hold     = false;
global.ip_R2_pressed  = false;
global.ip_R2_released = false;

global.ip_start_hold     = false; //minimap &amp; intel
global.ip_start_pressed  = false;
global.ip_start_released = false;
global.ip_select_hold     = false; //damage chart?
global.ip_select_pressed  = false;
global.ip_select_released = false;

global.ip_LSB_hold     = false; //left stick disable/enable
global.ip_LSB_pressed  = false;
global.ip_LSB_released = false;
global.ip_RSB_hold     = false; //right stick disable/enable
global.ip_RSB_pressed  = false; 
global.ip_RSB_released = false;

//Special commands, L/R tick conrols enable/disable
global.ip_LS_on = true;
global.ip_RS_on = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage charts

//Primary [defender,attacker]

//  01. L_Inf         02. H_Inf         03. L.Gun         04. Officer       05. Recon         06. APC           07. L_Tank        08. Artillery     09. Anti-air      10. Covert_Op     11. H_Tank        12. Rocket        13. Land_Cruiser / X by Y
    DMG_P[01,01]= -1; DMG_P[02,01]= -1; DMG_P[03,01]= -1; DMG_P[04,01]= -1; DMG_P[05,01]= -1; DMG_P[06,01]= -1; DMG_P[07,01]= -1; DMG_P[08,01]= -1; DMG_P[09,01]= -1; DMG_P[10,01]= -1; DMG_P[11,01]= -1; DMG_P[12,01]= -1; DMG_P[13,01]= -1; // 01. L_Inf      
    DMG_P[01,02]= -1; DMG_P[02,02]= -1; DMG_P[03,02]= -1; DMG_P[04,02]= -1; DMG_P[05,02]= 85; DMG_P[06,02]= 75; DMG_P[07,02]= 55; DMG_P[08,02]= 70; DMG_P[09,02]= 55; DMG_P[10,02]= 85; DMG_P[11,02]= 15; DMG_P[12,02]= 85; DMG_P[13,02]=  5; // 02. H_Inf    
    DMG_P[01,03]=115; DMG_P[02,03]= 85; DMG_P[03,03]= 85; DMG_P[04,03]= 85; DMG_P[05,03]= 45; DMG_P[06,03]= 40; DMG_P[07,03]= 30; DMG_P[08,03]= 45; DMG_P[09,03]= 30; DMG_P[10,03]= 45; DMG_P[11,03]=  5; DMG_P[12,03]= 55; DMG_P[13,03]=  3; // 03. L.Gun  
    DMG_P[01,04]= -1; DMG_P[02,04]= -1; DMG_P[03,04]= -1; DMG_P[04,04]= -1; DMG_P[05,04]= -1; DMG_P[06,04]= -1; DMG_P[07,04]= -1; DMG_P[08,04]= -1; DMG_P[09,04]= -1; DMG_P[10,04]= -1; DMG_P[11,04]= -1; DMG_P[12,04]= -1; DMG_P[13,04]= -1; // 04. Officer 
    DMG_P[01,05]= -1; DMG_P[02,05]= -1; DMG_P[03,05]= -1; DMG_P[04,05]= -1; DMG_P[05,05]= -1; DMG_P[06,05]= -1; DMG_P[07,05]= -1; DMG_P[08,05]= -1; DMG_P[09,05]= -1; DMG_P[10,05]= -1; DMG_P[11,05]= -1; DMG_P[12,05]= -1; DMG_P[13,05]= -1; // 05. Recon
    DMG_P[01,06]= -1; DMG_P[02,06]= -1; DMG_P[03,06]= -1; DMG_P[04,06]= -1; DMG_P[05,06]= -1; DMG_P[06,06]= -1; DMG_P[07,06]= -1; DMG_P[08,06]= -1; DMG_P[09,06]= -1; DMG_P[10,06]= -1; DMG_P[11,06]= -1; DMG_P[12,06]= -1; DMG_P[13,06]= -1; // 06. APC
    DMG_P[01,07]= -1; DMG_P[02,07]= -1; DMG_P[03,07]= -1; DMG_P[04,07]= -1; DMG_P[05,07]= 85; DMG_P[06,07]= 75; DMG_P[07,07]= 55; DMG_P[08,07]= 70; DMG_P[09,07]= 75; DMG_P[10,07]= 85; DMG_P[11,07]= 15; DMG_P[12,07]= 85; DMG_P[13,07]=  5; // 07. L_Tank
    DMG_P[01,08]= 90; DMG_P[02,08]= 85; DMG_P[03,08]= 90; DMG_P[04,08]= 85; DMG_P[05,08]= 80; DMG_P[06,08]= 70; DMG_P[07,08]= 60; DMG_P[08,08]= 75; DMG_P[09,08]= 65; DMG_P[10,08]= 80; DMG_P[11,08]= 30; DMG_P[12,08]= 80; DMG_P[13,08]= 10; // 08. Artillery
    DMG_P[01,09]=120; DMG_P[02,09]=105; DMG_P[03,09]=120; DMG_P[04,09]=105; DMG_P[05,09]= 60; DMG_P[06,09]= 50; DMG_P[07,09]= 15; DMG_P[08,09]= 50; DMG_P[09,09]= 45; DMG_P[10,09]= 60; DMG_P[11,09]=  5; DMG_P[12,09]= 55; DMG_P[13,09]=  2; // 09. Anti-Air
    DMG_P[01,10]= -1; DMG_P[02,10]= -1; DMG_P[03,10]= -1; DMG_P[04,10]= -1; DMG_P[05,10]= -1; DMG_P[06,10]= -1; DMG_P[07,10]= -1; DMG_P[08,10]= -1; DMG_P[09,10]= -1; DMG_P[10,10]= -1; DMG_P[11,10]= -1; DMG_P[12,10]= -1; DMG_P[13,10]= -1; // 10. Covert_op
    DMG_P[01,11]= -1; DMG_P[02,11]= -1; DMG_P[03,11]= -1; DMG_P[04,11]= -1; DMG_P[05,11]=105; DMG_P[06,11]=105; DMG_P[07,11]= 85; DMG_P[08,11]=105; DMG_P[09,11]=105; DMG_P[10,11]=105; DMG_P[11,11]= 35; DMG_P[12,11]=105; DMG_P[13,11]= 15; // 11. H_tank
    DMG_P[01,12]= 90; DMG_P[02,12]= 85; DMG_P[03,12]= 90; DMG_P[04,12]= 85; DMG_P[05,12]= 80; DMG_P[06,12]= 70; DMG_P[07,12]= 60; DMG_P[08,12]= 75; DMG_P[09,12]= 65; DMG_P[10,12]= 80; DMG_P[11,12]= 30; DMG_P[12,12]= 80; DMG_P[13,12]= 10; // 12. Rocket
    DMG_P[01,13]=500; DMG_P[02,13]=500; DMG_P[03,13]=500; DMG_P[04,13]=500; DMG_P[05,13]=340; DMG_P[06,13]=300; DMG_P[07,13]=220; DMG_P[08,13]=300; DMG_P[09,13]=300; DMG_P[10,13]=340; DMG_P[11,13]= 85; DMG_P[12,13]=340; DMG_P[13,13]= 35; // 13. Lancruiser
    
//Secondary

//  01. L_Inf         02. H_Inf         03. L.Gun         04. Officer       05. Recon         06. APC           07. L_Tank        08. Artillery     09. Anti-air      10. Covert_Op     11. H_Tank        12. Rocket        13. Land_Cruiser / X by Y
    DMG_S[01,01]= 55; DMG_S[02,01]= 45; DMG_S[03,01]= 55; DMG_S[04,01]= 45; DMG_S[05,01]= 12; DMG_S[06,01]= 14; DMG_S[07,01]=  5; DMG_S[08,01]= 10; DMG_S[09,01]=  3; DMG_S[10,01]= 12; DMG_S[11,01]=  1; DMG_S[12,01]= 20; DMG_S[13,01]=  0; // 01. L_Inf      
    DMG_S[01,02]= 65; DMG_S[02,02]= 55; DMG_S[03,02]= 65; DMG_S[04,02]= 55; DMG_S[05,02]= 18; DMG_S[06,02]= 20; DMG_S[07,02]=  8; DMG_S[08,02]= 15; DMG_S[09,02]=  5; DMG_S[10,02]= 18; DMG_S[11,02]=  1; DMG_S[12,02]= 35; DMG_S[13,02]=  0; // 02. H_Inf    
    DMG_S[01,03]= -1; DMG_S[02,03]= -1; DMG_S[03,03]= -1; DMG_S[04,03]= -1; DMG_S[05,03]= -1; DMG_S[06,03]= 14; DMG_S[07,03]= -1; DMG_S[08,03]= -1; DMG_S[09,03]= -1; DMG_S[10,03]= -1; DMG_S[11,03]= -1; DMG_S[12,03]= -1; DMG_S[13,03]= -1; // 03. L.Gun  
    DMG_S[01,04]= 65; DMG_S[02,04]= 55; DMG_S[03,04]= 65; DMG_S[04,04]= 55; DMG_S[05,04]= 18; DMG_S[06,04]= 20; DMG_S[07,04]=  8; DMG_S[08,04]= 15; DMG_S[09,04]=  5; DMG_S[10,04]= 18; DMG_S[11,04]=  1; DMG_S[12,04]= 35; DMG_S[13,04]=  0; // 04. Officer 
    DMG_S[01,05]= 75; DMG_S[02,05]= 65; DMG_S[03,05]= 75; DMG_S[04,05]= 65; DMG_S[05,05]= 35; DMG_S[06,05]= 45; DMG_S[07,05]=  8; DMG_S[08,05]= 45; DMG_S[09,05]=  8; DMG_S[10,05]= 35; DMG_S[11,05]=  1; DMG_S[12,05]= 55; DMG_S[13,05]=  0; // 05. Recon
    DMG_S[01,06]= 65; DMG_S[02,06]= 55; DMG_S[03,06]= 65; DMG_S[04,06]= 55; DMG_S[05,06]= 18; DMG_S[06,06]= 14; DMG_S[07,06]=  8; DMG_S[08,06]= 15; DMG_S[09,06]=  5; DMG_S[10,06]= 18; DMG_S[11,06]=  1; DMG_S[12,06]= 35; DMG_S[13,06]=  0; // 06. APC
    DMG_S[01,07]= 75; DMG_S[02,07]= 70; DMG_S[03,07]= 75; DMG_S[04,07]= 70; DMG_S[05,07]= 40; DMG_S[06,07]= 20; DMG_S[07,07]=  8; DMG_S[08,07]= 45; DMG_S[09,07]=  8; DMG_S[10,07]= 40; DMG_S[11,07]=  1; DMG_S[12,07]= 55; DMG_S[13,07]=  0; // 07. L_Tank
    DMG_S[01,08]= -1; DMG_S[02,08]= -1; DMG_S[03,08]= -1; DMG_S[04,08]= -1; DMG_S[05,08]= -1; DMG_S[06,08]= -1; DMG_S[07,08]= -1; DMG_S[08,08]= -1; DMG_S[09,08]= -1; DMG_S[10,08]= -1; DMG_S[11,08]= -1; DMG_S[12,08]= -1; DMG_S[13,08]= -1; // 08. Artillery
    DMG_S[01,09]= -1; DMG_S[02,09]= -1; DMG_S[03,09]= -1; DMG_S[04,09]= -1; DMG_S[05,09]= -1; DMG_S[06,09]= -1; DMG_S[07,09]= -1; DMG_S[08,09]= -1; DMG_S[09,09]= -1; DMG_S[10,09]= -1; DMG_S[11,09]= -1; DMG_S[12,09]= -1; DMG_S[13,09]= -1; // 09. Anti-Air
    DMG_S[01,10]= 75; DMG_S[02,10]= 65; DMG_S[03,10]= 75; DMG_S[04,10]= 65; DMG_S[05,10]= 35; DMG_S[06,10]= 45; DMG_S[07,10]=  8; DMG_S[08,10]= 45; DMG_S[09,10]=  8; DMG_S[10,10]= 35; DMG_S[11,10]=  1; DMG_S[12,10]= 55; DMG_S[13,10]=  0; // 10. Covert_op
    DMG_S[01,11]=105; DMG_S[02,11]= 95; DMG_S[03,11]=105; DMG_S[04,11]= 95; DMG_S[05,11]= 45; DMG_S[06,11]= 45; DMG_S[07,11]= 10; DMG_S[08,11]= 45; DMG_S[09,11]= 10; DMG_S[10,11]= 45; DMG_S[11,11]=  1; DMG_S[12,11]= 65; DMG_S[13,11]=  0; // 11. H_tank
    DMG_S[01,12]= -1; DMG_S[02,12]= -1; DMG_S[03,12]= -1; DMG_S[04,12]= -1; DMG_S[05,12]= -1; DMG_S[06,12]= -1; DMG_S[07,12]= -1; DMG_S[08,12]= -1; DMG_S[09,12]= -1; DMG_S[10,12]= -1; DMG_S[11,12]= -1; DMG_S[12,12]= -1; DMG_S[13,12]= -1; // 12. Rocket
    DMG_S[01,13]=500; DMG_S[02,13]=500; DMG_S[03,13]=500; DMG_S[04,13]=500; DMG_S[05,13]= 85; DMG_S[06,13]= 75; DMG_S[07,13]= 55; DMG_S[08,13]= 70; DMG_S[09,13]= 75; DMG_S[10,13]= 85; DMG_S[11,13]= 15; DMG_S[12,13]= 85; DMG_S[13,13]=  5; // 13. Lancruiser
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit Cost Array using unit index

global.cost[00] =     0 ; // Parent
global.cost[01] =  1000 ; // Light Infantry
global.cost[02] =  3000 ; // Heavy infantry
global.cost[03] =  3000 ; // Long Gun
global.cost[04] =  4000 ; // Officer
global.cost[05] =  4000 ; // Recon
global.cost[06] =  5000 ; // APC
global.cost[07] =  6000 ; // Light Tank 
global.cost[08] =  7000 ; // Artillery
global.cost[09] =  6000 ; // AA / IFV
global.cost[10] =  8000 ; // Covert Op
global.cost[11] = 15000 ; // Heavy Tank
global.cost[12] = 12000 ; // Rocket
global.cost[13] = 32000 ; // Land Cuiser

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GLOBAL GAME OPTIONS

//player COs
global.P1_CO = 0 ;
global.P2_CO = 0 ;
global.P3_CO = 0 ; 
global.P4_CO = 0 ;
//arry duplicate
global.CO_P[0] = 0 ;
global.CO_P[1] = 1 ;
global.CO_P[2] = 4 ;
global.CO_P[3] = 6 ; 
global.CO_P[4] = 8 ;

//player teams
global.P1_Team = 1;
global.P2_Team = 2;
global.P3_Team = 3;
global.P4_Team = 4;
// array duplicate
global.Team_P[0] = 0;
global.Team_P[1] = 1;
global.Team_P[2] = 2;
global.Team_P[3] = 3;
global.Team_P[4] = 4;

//CPU player
global.isAIplayer[1] = false;
global.isAIplayer[2] = false;
global.isAIplayer[3] = false;
global.isAIplayer[4] = false;

//assigned player who is playing at this computer in networked play, 0 means normal hot seat, -4 or nooone as spectator or server controls, no game inputs
global.Local_Player = 0; 
global.player_name[1] = "P1 closed";
global.player_name[2] = "P2 closed";
global.player_name[3] = "P3 closed";
global.player_name[4] = "P4 closed";


//MAP SELECTION
global.map_select = "protoland.ubm";


    
//graphic controls
G_smooth = true;


//debug controls
global.alt_Disrupt = false; //disruptor is indirect fire
global.Disruptor_spread = false; // disruptor propigates throught target enemy unit radio

//indirect fire range assist during move
global.indirect_assist_on = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FOG &amp; Vison Variables


//Fog Of war
global.FoW_on = true;
//fog type
global.local_fog_type = "Standard";// "Sandard", "Limited", "Disabled"  

//FOG array

global.fow[0] = "Standard"; // local hotseat or server
global.fow[1] = "Standard"; // Standard - FOW on 
global.fow[2] = "Standard"; // Limited  - albe to see enemy on off turns  
global.fow[3] = "Standard"; // Disabled - no fog of war
global.fow[4] = "Standard"; // 

//observable players - either player at local game or for AI controll debug
//should be automated eventually
global.observe_P[0] = false; //neutral/non player always not observable
global.observe_P[1] = true;
global.observe_P[2] = true;
global.observe_P[3] = true;
global.observe_P[4] = true;

/*
global.P_View will replace the abouve
it will describe the obervablility of unit and terrain
vector 1 = acting player
vector 2 = observed unit/terrain owner
all true on default
to be adjusted on start of game
0 for neutral
*/
var pvi = 0; // observer
var pvj = 0; // subject

for ( pvi = 0 ; pvi &lt; 5; pvi++ ){
    for ( pvj = 0 ; pvj &lt; 5; pvj++ ){
        global.P_View[pvi,pvj] = false;
        } 
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global Network Variables
/*
net_mode
0 = No network
1 = Host
2 = Player Client
3 = spectator Client
4 = Server (match making and stores games...eventually)
*/

global.net_mode = 0;
//assign default server port
global.sPort = 15896; //15316;
//Server side sockets ( noone = -4 , GM:S defaults)
//coonects to 4 clients, becasue 4 players
global.sSocket[1] = noone ;
global.sSocket[2] = noone ;
global.sSocket[3] = noone ;
global.sSocket[4] = noone ;
//client side socket, only one needed?
global.cSocket = noone ; 
//list of clients
global.client_list = ds_list_create();
global.conect_P[1] = false;
global.conect_P[2] = false;
global.conect_P[3] = false;
global.conect_P[4] = false;


global.sender = 0

//script to be passed into scripts on reciving data
global.net_data_map = "script not found";






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///testing stream BGM from externa file
test_bgm = audio_create_stream("bgm1.ogg");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Temp- Mouse control tool tip on/off switch Var
global.Mouse_control_tool_tip_is_on = false;
global.Mouse_control_tool_tip_text = "left click and drag to move camera or unit"
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit and Terrain type Indexes
//used as reference for save and load

//Units
global.unit_type[ 0] = obj_unit ; //parent
global.unit_type[ 1] = obj_unit_LightInfantry;
global.unit_type[ 2] = obj_unit_HeavyInfantry;
global.unit_type[ 3] = obj_unit_LongGun;
global.unit_type[ 4] = obj_unit_Officer;
global.unit_type[ 5] = obj_unit_Recon;
global.unit_type[ 6] = obj_unit_APC;
global.unit_type[ 7] = obj_unit_LightTank
global.unit_type[ 8] = obj_unit_Artillery
global.unit_type[ 9] = obj_unit_AA;
global.unit_type[10] = obj_unit_CovertOp;
global.unit_type[11] = obj_unit_HeavyTank;
global.unit_type[12] = obj_unit_Rocket;
global.unit_type[13] = obj_unit_LandCruiser;

//Terrains
global.terrain_type[ 0] = obj_terrain_Sea; 
global.terrain_type[ 1] = obj_terrain_Plains;
global.terrain_type[ 2] = obj_terrain_Road;
global.terrain_type[ 3] = obj_terrain_Mountain;
global.terrain_type[ 4] = obj_terrain_Woods;
global.terrain_type[ 5] = obj_terrain_Bridge;

//special bridge types
global.terrain_type[50] = obj_terrain_SeaBridge;
global.terrain_type[56] = obj_terrain_RiverBridge;

global.terrain_type[ 6] = obj_terrain_River;
global.terrain_type[ 9] = obj_terrain; //parent
global.terrain_type[10] = obj_property; //parent
global.terrain_type[11] = obj_terrain_HQ;
global.terrain_type[12] = obj_terrain_Base;
global.terrain_type[13] = obj_terrain_City;
global.terrain_type[14] = obj_terrain_RadioTower;
global.terrain_type[15] = obj_terrain_CommandPost;

//COs
global.CO_type[ 0] = obj_CO_0 ; //parent
global.CO_type[ 1] = obj_CO_1 ; //Intel+
global.CO_type[ 2] = obj_CO_2 ; //HP+
global.CO_type[ 3] = obj_CO_3 ; //Radio+
global.CO_type[ 4] = obj_CO_4 ; //Direct+
global.CO_type[ 5] = obj_CO_5 ; //Infantry+
global.CO_type[ 6] = obj_CO_6 ; //range+
global.CO_type[ 7] = obj_CO_7 ; //Mov/atk+ (smoke)
global.CO_type[ 8] = obj_CO_8 ; //cost+
global.CO_type[ 9] = obj_CO_9 ; //Officer+
global.CO_type[10] = obj_CO_10; //anti-radio


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Networkign options and global variables

///Descript &amp; Global Vars

//keeps track of last network event and checks
global.last_network_event = "Waiting for input";

/*  
- Network mode -
0 = not network
1 = player host server
2 = player client client    
*/
global.network_mode = 0;

//empty server ip used from client side, defaults to same device
global.server_ip = "127.0.0.1";

//check player readiness for next event
global.Host_ready = false;
global.P_ready[1] = false;
global.P_ready[2] = false;
global.P_ready[3] = false;
global.P_ready[4] = false;

//data map for netowrk data transfer, so i don'[t have to constantly make up names for local variables 
//for unit commands -&gt; basicBattleController -&gt; unit control variables
//note - global.net_data_map is initiated in the network event and is used to process incomming data
global.map_out = ds_map_create();
global.json_out = "";
global.relay_string = "";

//command que - 1st in / 1st out list of JSON strings recieved from active player
//curretn plan is to have every one sync on turn change
//this is to prevent huge lags between player input, waiting for other games to sync but end turn is ok caus eits a whole thing.
global.net_com = ds_queue_create();
//flag for if system is ready for next network input from que
global.ready_next = true;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera scroll variables
global.cam_speed = 8;
global.cam_border = 48;

//cheking to see if git desktop will update
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Variables

var i=1;
for (i=1;i&lt;5;i++){
    //player options
    global.inplay_P[i] = false;
    global.team_P[i]   = i;
    global.co_P[i]     = i;   
    global.p_slot[i]      =i; //player slot assignment, defaults 
    }
//terms
//global.set_fog     = "standard";
//global.set_radio   = true;
global.funds   = 0;
global.income  = 1000;
global.turns   = 0; // 0 = disabled, incriments of 15?
global.capture = 0; // 0 = disabled
global.cap_max =  0; // maximum properties on map 
//hidden stats
global.player_count = 0;

//save vs.map selections positions
global.vs_map_dir_index =  0;
global.vs_maps_index    =  0;
global.vs_map_win_pos   = -1;
global.vs_map_cur_pos   =  1;

//save vs. setup positions

//temp music setup
///temp sount settings

//stop all audio
audio_stop_all();

//external bgm switch for prototype
global.BGM_on = false;
// bgm's
global.tempBGM[1] = "bgm1.ogg" ;
global.tempBGM[2] = "bgm2.ogg" ;
global.tempBGM[3] = "bgm3.ogg" ;
global.tempBGM[4] = "bgm4.ogg" ;
//set bgm to none
global.BGM = noone;

//terms - radio
global.radio = true;






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse graphic controls
global.m_type = spr_mouseSlapper;
global.m_frame = 0;
global.m_over = 0; //mouse over index specified by local controls
//global moouse active?
global.m_gactive = true; //turn on to use global mouse controls becase some old code uses their own mouse
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///star dance and other bouncy things
global.star_dance += 1;
if  (global.star_dance &gt; 5) global.star_dance = 0;
alarm[4]=4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///smoke frame ++

global.smoke_frame +=1;
if (global.smoke_frame = 6) global.smoke_frame = 0;
alarm[3] = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///glow and waves animation
if (wave_switch )global.wave += 1; 
else global.wave -= 1;

if (global.wave &lt; 0){ 
    //global.wave = global.wave_max;
    wave_switch = true;
    alarm[2] = 10;
    }
else if (global.wave &gt; global.wave_max){
    //global.wave = 0
    wave_switch = false;
    alarm[2]  = 100; 
    }
else alarm[2] = 1;

global.glow = global.wave/global.wave_max;
//smoke alpha
global.smoke_alpha = global.glow^(-1) //(global.glow/2) + 0.5;

//restart alarm


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blinking animator

if global.blinking {
    global.blinking = false;
    alarm[1] = 20;
    }
else {
    global.blinking = true;
    alarm[1] = 20;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm 0 used to animate cursors

///animation controller
//this is a switch the check the cursors animation state and sets an alarm for the next frame frame delay (out of 60 fps) 

//Variable set up in create evemt

switch  (global.cursorFrame)    
    {
    case 1: global.cursorFrameIndex = 1;
            global.cursorAlpha = 1;
            alarm[0] = 24;
            global.cursorFrame = 2;
            break;
            
    case 2: global.cursorFrameIndex = 2;
            global.cursorAlpha = 0.5; 
            alarm[0] = 4;
            global.cursorFrame = 3;
            break;
    
    case 3: global.cursorFrameIndex = 3;
            global.cursorAlpha = 0;
            alarm[0] = 8;
            global.cursorFrame = 4;
            break;

    case 4: global.cursorFrameIndex = 2;
            global.cursorAlpha = 0.5;
            alarm[0] = 2;
            global.cursorFrame = 5;
            break;
                
    case 5: global.cursorFrameIndex = 1;
            global.cursorAlpha = 1;
            alarm[0] = 2;
            global.cursorFrame = 6;
            break;
            
    case 6: global.cursorFrameIndex = 0;
            global.cursorAlpha = 1;
            alarm[0] = 2;
            global.cursorFrame = 1;
            break;        
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process network inputs from Queue
if ( global.net_mode != 0 and ds_queue_size(global.net_com) &gt; 0 and global.ready_next = true){
    var data_string = ds_queue_dequeue(global.net_com);
    global.relay_string = data_string;
    global.net_data_map  = json_decode(data_string);
    //read and display script instructions
    global.last_network_event = ds_map_find_value( global.net_data_map , "scr" );
    // run script from map
    script_execute( asset_get_index( ds_map_find_value(global.net_data_map , "scr") ) );
    }
    
    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///analogue stick inputs type 1

global.snav_h = 0;
global.snav_v = 0;

if (global.Lstick_type = 1 and global.ip_LS_on) {
    global.snav_h = gamepad_axis_value(0,gp_axislh);
    global.snav_v = gamepad_axis_value(0,gp_axislv);
    }
if (global.Rstick_type = 1 and global.ip_RS_on) {
    global.snav_h += gamepad_axis_value(0,gp_axisrh);
    global.snav_v += gamepad_axis_value(0,gp_axisrv);
    }


//right
if (global.snav_h &gt; global.snav_thresh){
    if (global.snav_right_hold) global.snav_right_pressed = false;
    else{
        global.snav_right_pressed = true;
        global.snav_right_hold = true;
        }  
    }
else if (global.snav_right_hold){ 
    global.snav_right_released = true;
    global.snav_right_hold = false;
    }
else{  
    global.snav_right_released = false;
    global.snav_right_pressed = false;
    }
//left
if (global.snav_h &lt; -global.snav_thresh){
    if (global.snav_left_hold) global.snav_left_pressed = false;
    else{
        global.snav_left_pressed = true;
        global.snav_left_hold = true;
        }  
    }
else if (global.snav_left_hold){ 
    global.snav_left_released = true;
    global.snav_left_hold = false;
    }
else{  
    global.snav_left_released = false;
    global.snav_left_pressed = false;
    }

//up
if (global.snav_v &lt; -global.snav_thresh){
    if (global.snav_up_hold) global.snav_up_pressed = false;
    else{
        global.snav_up_pressed = true;
        global.snav_up_hold = true;
        }  
    }
else if (global.snav_up_hold){ 
    global.snav_up_released = true;
    global.snav_up_hold = false;
    }
else{  
    global.snav_up_released = false;
    global.snav_up_pressed = false;
    }

//down
if (global.snav_v &gt; global.snav_thresh){
    if (global.snav_down_hold) global.snav_down_pressed = false;
    else{
        global.snav_down_pressed = true;
        global.snav_down_hold = true;
        }  
    }
else if (global.snav_down_hold){ 
    global.snav_down_released = true;
    global.snav_down_hold = false;
    }
else{  
    global.snav_down_released = false;
    global.snav_down_pressed = false;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///analougue stick inpute type 2

global.smap_h = 0;
global.smap_v = 0;

if (global.Lstick_type = 2 and global.ip_LS_on) {
    global.smap_h = gamepad_axis_value(0,gp_axislh);
    global.smap_v = gamepad_axis_value(0,gp_axislv);
    }
if (global.Rstick_type = 2 and global.ip_RS_on ) {
    global.smap_h += gamepad_axis_value(0,gp_axisrh);
    global.smap_v += gamepad_axis_value(0,gp_axisrv);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///L/R stick enable/disable

if global.ip_LSB_pressed {
    global.ip_LS_on = !global.ip_LS_on;
    var msg_event = instance_create(0,0,obj_fading_text);
    if global.ip_LS_on msg_event.msg = "Left stick enabled";
    else msg_event.msg = "Left stick disabled";
    }

if global.ip_RSB_pressed { 
    global.ip_RS_on = !global.ip_RS_on;
    var msg_event = instance_create(0,0,obj_fading_text);
    if global.ip_RS_on msg_event.msg = "Right stick enabled";
    else msg_event.msg = "Right stick disabled"; 
    }

 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard and controller Listiner

//Navigation (always check for arrow keys)
global.ip_up_pressed  =  gamepad_button_check_pressed(0,global.gpi_up) or  keyboard_check_pressed(global.kbi_up) or keyboard_check_pressed(vk_up) or global.snav_up_pressed;
global.ip_up_released = gamepad_button_check_released(0,global.gpi_up) or keyboard_check_released(global.kbi_up) or keyboard_check_released(vk_up)or global.snav_up_released;
if global.ip_up_pressed{  
    global.ip_up_hold = true;
    global.ip_nav = 8;
    }
if global.ip_up_released global.ip_up_hold = false;

global.ip_down_pressed  =  gamepad_button_check_pressed(0,global.gpi_down) or  keyboard_check_pressed(global.kbi_down) or keyboard_check_pressed(vk_down) or global.snav_down_pressed;
global.ip_down_released = gamepad_button_check_released(0,global.gpi_down) or keyboard_check_released(global.kbi_down) or keyboard_check_released(vk_down)or global.snav_down_released;
if global.ip_down_pressed {  
    global.ip_down_hold = true;
    global.ip_nav = 2;
    }
if global.ip_down_released global.ip_down_hold = false;

global.ip_left_pressed  =  gamepad_button_check_pressed(0,global.gpi_left) or  keyboard_check_pressed(global.kbi_left) or keyboard_check_pressed(vk_left) or global.snav_left_pressed; 
global.ip_left_released = gamepad_button_check_released(0,global.gpi_left) or keyboard_check_released(global.kbi_left) or keyboard_check_released(vk_left) or global.snav_left_released;
if global.ip_left_pressed {  
    global.ip_left_hold = true;
    global.ip_nav = 4;
    }
if global.ip_left_released global.ip_left_hold = false;


global.ip_right_pressed  =  gamepad_button_check_pressed(0,global.gpi_right) or  keyboard_check_pressed(global.kbi_right) or keyboard_check_pressed(vk_right) or global.snav_right_pressed;
global.ip_right_released = gamepad_button_check_released(0,global.gpi_right) or keyboard_check_released(global.kbi_right) or keyboard_check_released(vk_right) or global.snav_right_released;
if global.ip_right_pressed { 
    global.ip_right_hold = true;
    global.ip_nav = 6;
    }
if global.ip_right_released global.ip_right_hold = false;


if (!global.ip_up_hold and !global.ip_down_hold and !global.ip_left_hold and !global.ip_right_hold) global.ip_nav = 0;

//FACE BUTTONS
//Confirm ( always check for enter)
global.ip_A_pressed  =  gamepad_button_check_pressed(0,global.gpi_A) or  keyboard_check_pressed(global.kbi_A) or keyboard_check_pressed(vk_enter);
global.ip_A_released = gamepad_button_check_released(0,global.gpi_A) or keyboard_check_released(global.kbi_A) or keyboard_check_released(vk_enter);
if global.ip_A_pressed  global.ip_A_hold = true;
if global.ip_A_released global.ip_A_hold = false;
//cancel (always check for back space)
global.ip_B_pressed  =  gamepad_button_check_pressed(0,global.gpi_B) or  keyboard_check_pressed(global.kbi_B) or keyboard_check_pressed(vk_backspace);
global.ip_B_released = gamepad_button_check_released(0,global.gpi_B) or keyboard_check_released(global.kbi_B) or keyboard_check_released(vk_backspace);
if global.ip_B_pressed  global.ip_B_hold = true;
if global.ip_B_released global.ip_B_hold = false;
//Intel check
global.ip_X_pressed  =  gamepad_button_check_pressed(0,global.gpi_X) or  keyboard_check_pressed(global.kbi_X);
global.ip_X_released = gamepad_button_check_released(0,global.gpi_X) or keyboard_check_released(global.kbi_X);
if global.ip_X_pressed  global.ip_X_hold = true;
if global.ip_X_released global.ip_X_hold = false;
//Radiocheck
global.ip_Y_pressed  =  gamepad_button_check_pressed(0,global.gpi_Y) or  keyboard_check_pressed(global.kbi_Y);
global.ip_Y_released = gamepad_button_check_released(0,global.gpi_Y) or keyboard_check_released(global.kbi_Y);
if global.ip_Y_pressed  global.ip_Y_hold = true;
if global.ip_Y_released global.ip_Y_hold = false;


//START/SELECT
//start - minimap
global.ip_start_pressed  =  gamepad_button_check_pressed(0,global.gpi_start) or  keyboard_check_pressed(global.kbi_start);
global.ip_start_released = gamepad_button_check_released(0,global.gpi_start) or keyboard_check_released(global.kbi_start);
if global.ip_start_pressed  global.ip_start_hold = true;
if global.ip_start_released global.ip_start_hold = false;
//select - damage chart
global.ip_select_pressed  =  gamepad_button_check_pressed(0,global.gpi_select);
global.ip_select_released = gamepad_button_check_released(0,global.gpi_select);
if global.ip_select_pressed  global.ip_select_hold = true;
if global.ip_select_released global.ip_select_hold = false;

// L stick Buttons (enable/disable)
global.ip_LSB_pressed  =  gamepad_button_check_pressed(0,global.gpi_LSB);
global.ip_LSB_released = gamepad_button_check_released(0,global.gpi_LSB);
if global.ip_LSB_pressed  global.ip_LSB_hold = true;
if global.ip_LSB_released global.ip_LSB_hold = false;
// r stick Buttons (enable/disable)
global.ip_RSB_pressed  =  gamepad_button_check_pressed(0,global.gpi_RSB);
global.ip_RSB_released = gamepad_button_check_released(0,global.gpi_RSB);
if global.ip_RSB_pressed  global.ip_RSB_hold = true;
if global.ip_RSB_released global.ip_RSB_hold = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// COMMED OUT recieving saves and starting next turn
/*
//chek data type
if ds_map_find_value(async_load, "type") = network_type_data{
    //recive and lable buffer
    var b_incoming = ds_map_find_value(async_load, "buffer");
    
    //save buffer in app data
    if file_exists("recieved_turn.ubm")
    file_delete("recieved_turn.ubm");
    
    buffer_save(b_incoming,"recieved_turn.ubm");
    
    //switch network turning on
    global.network_turn_switch = true;
    
    //display size
    global.last_network_event = "recieved dile size: " + string(buffer_get_size(b_incoming));
    
    //auto start next turn
    room_goto(rm_continue);
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMMED OUT incomming Data type, sav as ini file and run included script
/*
recieving a .snd        (sending  file)
saving it as a .rcv     (Recieved file)
execute net_Script in [scr] [name]
*/

/*


//check incomming data type
if ds_map_find_value(async_load, "type") = network_type_data{
    global.last_network_event = "data recieved";
    //extract data buffer 
    var b_incoming = ds_map_find_value(async_load, "buffer");
    //replace exsistingfile with buffer in game data folder 
    //(C: Users &gt; [Name] &gt; AppData &gt; UberkriegPrototype3Live )
    var file_name = "incoming.rcv";
    if file_exists(file_name) file_delete(file_name);
    buffer_save(b_incoming,file_name);
    if file_exists(file_name) global.last_network_event = "ini file recieved";
    
    //get script name from ini file
    ini_open(file_name);
    var script_name = ini_read_string( "meta", "scr", "net_data_default");
    global.last_network_event = "found script : " + script_name;
    ini_close();
    
    //execute script with recieved file as argument
    //NOTE: Script names will not resolve as assets on the HTML5 target platform due to obfuscation of the final code, 
    //which may cause issues and should be taken into consideration when using the function. 
    var script_index = asset_get_index(script_name);
    script_execute( script_index , file_name );
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reciving JSON string

//check incoming data type
if ds_map_find_value( async_load , "type" ) = network_type_data {
    global.last_network_event = "data recieved";
    //extract buffer datta
    var b_in = ds_map_find_value( async_load , "buffer" );
    var data_in = buffer_read( b_in , buffer_string );
    //read string
    global.last_network_event = data_in;
    //add sting to queue
    ds_queue_enqueue(global.net_com,data_in);
    //scr_relay();
    /* ******************************Commed out, JSON string will be saved to a que and deconded as we go
    //convert string to ds map
    global.net_data_map = json_decode( data_in );
    //read and display script instructions
    global.last_network_event = ds_map_find_value( global.net_data_map , "scr" );
    // run script from map
    script_execute( asset_get_index( ds_map_find_value(global.net_data_map , "scr") ) );
    ds_map_destroy( global.net_data_map );
    
    
    //convert to ds map
    var net_map = json_decode( buff_read );
    //read "scr" key and execute as script
    var net_scr =  ds_map_read( net_map , "scr" );
    global.last_network_event = "hey" + net_scr ;
    */
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy audio stream to prevent memory leak
audio_destroy_stream(test_bgm);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_create(0,0,self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug inputs
//draw_text(24,2, "frame delay: " + string(global.cursorFrameIndex)) 
/*
draw_text(12,12*4,"NAV: "+string(global.ip_nav));

draw_text(12,12*6,"UP:    "+string(global.ip_up_hold));
draw_text(12,12*7,"DOWN:  "+string(global.ip_down_hold));
draw_text(12,12*8,"left:  "+string(global.ip_left_hold));
draw_text(12,12*9,"Right: "+string(global.ip_right_hold));

draw_text(12,12*11,"Confirm: "+string(global.ip_A_hold));
draw_text(12,12*12,"Cancel: "+string(global.ip_B_hold));
draw_text(12,12*13,"X: "+string(global.ip_X_hold));
draw_text(12,12*14,"Y: "+string(global.ip_Y_hold));

draw_text(12,12*16,"L Stick H: "+string(global.snav_h));
draw_text(12,12*17,"L Stick pressed: "+string(global.snav_left_pressed));
draw_text(12,12*18,"L Stick hold: "+string(global.snav_left_hold));
draw_text(12,12*19,"L Stick released: "+string(global.snav_left_released));

draw_text(12,12*21,"R Stick H: "+string(global.smap_h));
draw_text(12,12*22,"R Stick V: "+string(global.smap_v));
draw_text(12,12*23,"Y View: "+string(view_yview[0]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.m_gactive draw_sprite(global.m_type, global.m_frame, mouse_x,mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle full screen!
window_set_fullscreen(!window_get_fullscreen());

if( window_get_fullscreen() )
    {
    texture_set_interpolation(true);
    G_smooth = true 
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle res x1 &amp; x2

if (global.window_size = 1)
    {
    window_set_size( 768*2, 432*2 );
    global.window_size = 2;
    }   
else
    {  
    window_set_size( 768, 432 );
    global.window_size = 1
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room_goto(rm_debugStart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set graphics imterpolate or no

if G_smooth 
    {
        
        G_smooth = false ;
        texture_set_interpolation(false);
    }

else
    {
    
        G_smooth = true ;
        texture_set_interpolation(true);
        
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
