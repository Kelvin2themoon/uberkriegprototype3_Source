<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tempTitle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_MastertControls instance_destroy();
instance_create(0,0,obj_MastertControls);

///Network status readout var
global.last_network_event = "F5: Create Server " ;
//creat client menu
temp_ClientMenu =  instance_create(0,0,obj_temp_ClientMenu);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Host ready
global.Host_ready = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///temp sount settings

//stop all audio
audio_stop_all();

//external bgm switch for prototype
global.BGM_on = false;
// bgm's
global.tempBGM[1] = "bgm1.ogg" ;
global.tempBGM[2] = "bgm2.ogg" ;
global.tempBGM[3] = "bgm3.ogg" ;
global.tempBGM[4] = "bgm4.ogg" ;

global.BGM = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CO select

var maxCO = 10 ;

if keyboard_check_pressed( ord("1"))
    {
    if ( global.P1_CO &lt; maxCO ) global.P1_CO += 1 ;
    else                        global.P1_CO  = 0 ;
    }
    
if keyboard_check_pressed( ord("2"))
    {
    if ( global.P2_CO &lt; maxCO ) global.P2_CO += 1 ;
    else                        global.P2_CO  = 0 ;
    }
    
if keyboard_check_pressed( ord("3"))
    {
    if ( global.P3_CO &lt; maxCO ) global.P3_CO += 1 ;
    else                        global.P3_CO  = 0 ;
    }
    
if keyboard_check_pressed( ord("4"))
    {
    if ( global.P4_CO &lt; maxCO ) global.P4_CO += 1 ;
    else                        global.P4_CO  = 0 ;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///team select

var maxteam = 4 ;

if keyboard_check_pressed( ord("Q"))
    {
    if ( global.P1_Team &lt; maxteam ) { 
        global.P1_Team   += 1 ;
        global.Team_P[1] += 1;
        }
    else{
        global.P1_Team    = 1 ;
        global.Team_P[1]  = 1 ;
        }
    }
    
if keyboard_check_pressed( ord("W"))
    {
    if ( global.P2_Team &lt; maxteam ) { 
        global.P2_Team   += 1 ;
        global.Team_P[2] += 1;
        }
    else{
        global.P2_Team    = 1 ;
        global.Team_P[2]  = 1 ;
        }
    }
    
if keyboard_check_pressed( ord("E"))
    {
    if ( global.P3_Team &lt; maxteam ) { 
        global.P3_Team   += 1 ;
        global.Team_P[3] += 1;
        }
    else{
        global.P3_Team    = 1 ;
        global.Team_P[3]  = 1 ;
        }
    }
    
if keyboard_check_pressed( ord("R"))
    {
    if ( global.P4_Team &lt; maxteam ) { 
        global.P4_Team   += 1 ;
        global.Team_P[4] += 1;
        }
    else{
        global.P4_Team    = 1 ;
        global.Team_P[4]  = 1 ;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enter ip address
//if enteringIP global.server_ip = keyboard_string;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI and view switch

//AI
if keyboard_check_pressed( ord("A")) global.isAIplayer[1] = !global.isAIplayer[1];
if keyboard_check_pressed( ord("S")) global.isAIplayer[2] = !global.isAIplayer[2];
if keyboard_check_pressed( ord("D")) global.isAIplayer[3] = !global.isAIplayer[3];
if keyboard_check_pressed( ord("F")) global.isAIplayer[4] = !global.isAIplayer[4];

//fog of War type
if keyboard_check_pressed( ord("Z")){
    if (global.fow[1] = "Standard") global.fow[1] = "Limited";
    else if (global.fow[1] = "Limited")  global.fow[1] = "Disabled";
    else if (global.fow[1] = "Disabled") global.fow[1] = "Standard";
    }
if keyboard_check_pressed( ord("X")){
    if (global.fow[2] = "Standard") global.fow[2] = "Limited";
    else if (global.fow[2] = "Limited")  global.fow[2] = "Disabled";
    else if (global.fow[2] = "Disabled") global.fow[2] = "Standard";
    }
if keyboard_check_pressed( ord("C")){
    if (global.fow[3] = "Standard") global.fow[3] = "Limited";
    else if (global.fow[3] = "Limited")  global.fow[3] = "Disabled";
    else if (global.fow[3] = "Disabled") global.fow[3] = "Standard";
    }
if keyboard_check_pressed( ord("V")){
    if (global.fow[4] = "Standard") global.fow[4] = "Limited";
    else if (global.fow[4] = "Limited")  global.fow[4] = "Disabled";
    else if (global.fow[4] = "Disabled") global.fow[4] = "Standard";
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Random CO

global.P1_CO = irandom(9)+1;
global.P2_CO = irandom(9)+1;
global.P3_CO = irandom(9)+1;
global.P4_CO = irandom(9)+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///listn for connection request from client
/*
if global.net_mode = 1{
    //chwck connwct type
    if ds_map_find_value(async_load, "type") = network_type_connect{
        global.last_network_event = "conection request recieved!";
        //get socket used and stor as server socket
        global.sSocket = ds_map_find_value(async_load, "socket");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stuff
draw_self();

draw_text(227,157,"Prototype (v4.00)");
draw_text(227,157+16,"2022.01.16");

draw_text(227,210-16,"F1: Start Game");
draw_text(227,210+00,"F2: Map Editor");
draw_text(227,210+16,"F4: Load Save");

draw_text(12, 210 + 16*3 , "P1 FoW : " + global.fow[1]);
draw_text(12, 210 + 16*4 , "P2 FoW : " + global.fow[2]);
draw_text(12, 210 + 16*5 , "P3 FoW : " + global.fow[3]); 
draw_text(12, 210 + 16*6 , "P4 FoW : " + global.fow[4]);

draw_text(227, 210 + 16*3 , "P1. Cookieland   CO : " + string(global.P1_CO));
draw_text(227, 210 + 16*4 , "P2. Pepperland CO : " + string(global.P2_CO)); 
draw_text(227, 210 + 16*5 , "P3. Marmalland CO : " + string(global.P3_CO)); 
draw_text(227, 210 + 16*6 , "P4. Pretzeland CO : " + string(global.P4_CO));


draw_text(400, 210 + 16*3 , "P1.Team : " + string(global.Team_P[1]));
draw_text(400, 210 + 16*4 , "P2.Team : " + string(global.Team_P[2])); 
draw_text(400, 210 + 16*5 , "P3.Team : " + string(global.Team_P[3])); 
draw_text(400, 210 + 16*6 , "P4.Team : " + string(global.Team_P[4]));

draw_text(500, 210 + 16*3 , "P1.AI : " + string(global.isAIplayer[1]));
draw_text(500, 210 + 16*4 , "P2.AI : " + string(global.isAIplayer[2])); 
draw_text(500, 210 + 16*5 , "P3.AI : " + string(global.isAIplayer[3])); 
draw_text(500, 210 + 16*6 , "P4.AI : " + string(global.isAIplayer[4]));

draw_text(580, 210 + 16*3 , "P1.View on : " + string(global.observe_P[1]));
draw_text(580, 210 + 16*4 , "P2.View on : " + string(global.observe_P[2])); 
draw_text(580, 210 + 16*5 , "P3.View on : " + string(global.observe_P[3])); 
draw_text(580, 210 + 16*6 , "P4.View on : " + string(global.observe_P[4]));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw networking related stuff
/*

draw_text(227, 210 + 16*8 , "F5: Host Net Game");


draw_text(227, 210 + 16*8 , "F5: Host Game");
draw_text(227, 210 + 16*9 , "F6: Connect to address:");

//text box server IP input
draw_rectangle(400, 210 + 16*9 +2-4,530, 210 + 16*9 +2 + 17 -4 ,true);
//draw inside box
draw_text(404, 210 + 16*9, string(global.server_ip));
//draw input line
if (global.blinking and enteringIP)
draw_line(404 + string_width(global.server_ip), 210 + 16*9 ,404 + string_width(global.server_ip), 210 + 16*9 +15-4);


///draw network mode
draw_text(227, 210 + 16*10 +4, "network mode: "+ string(global.network_mode));
*/
//draw last network event
draw_text(227, 210 + 16*8 , global.last_network_event);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BGM status
if global.BGM_on draw_text(12,24,"BGM: ON");
else draw_text(12,24,"BGM: OFF");
//fog type
draw_text(12,36,"Fog Type: " + global.local_fog_type );


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="117">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///connect to server  



/*
global.network_mode = 2;
//create socket
global.cSocket = network_create_socket(network_socket_tcp);
//Connect to server (connect to same device:127.0.0.1, recieving server port 15316 
var isConnected = network_connect(global.cSocket, global.server_ip, global.sPort);
//change debugfidplay
global.last_network_event = "connect request sent to server!";

//check if connection worked
if isConnected &lt; 0 {
    global.last_network_event = "connect failed!";
    }
else {
    global.last_network_event = "connect Succeeded";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create server ( type tcp, port, max 1 client) returns REAL(server id)
/*
global.server = network_create_server(network_socket_tcp , global.sPort, 1)

//check if server worked
if global.server &lt; 0{
    global.last_network_event = "Failed to create server!";
    }
else{
    show_debug_message("Listening on " + string(global.sPort));
    global.last_network_event = "server created!";
    //switch server network type
    global.network_mode = 1;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create temp server host menu
HostMenu = instance_create(0,0,obj_temp_HostMenu);
//destroy temp menu
instance_destroy(temp_ClientMenu,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Local Continue
room_goto(rm_continue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go to animated battle scene test

room_goto(rm_battleSceneTest);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start map editor
room_goto(rm_MapEditor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Battle
room_goto(rm_game_Basic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch BGM on (dynamically load from app data)

if global.BGM_on {
    //if on switch off
    global.BGM_on = false;
    }
else{
    //swith on
    global.BGM_on = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch global.local_fog_type {
    case "Standard" :
        global.local_fog_type = "Limited";
        break;
    case "Limited" :
        global.local_fog_type = "Disabled";
        break;
    case "Disabled" :
        global.local_fog_type = "Standard";
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//start IP adress input
/*

if enteringIP = false{
    global.server_ip = "";
    keyboard_string = "";
    enteringIP = true;
    }
else enteringIP = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
