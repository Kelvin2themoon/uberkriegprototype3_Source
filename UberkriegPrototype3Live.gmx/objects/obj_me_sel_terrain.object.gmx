<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_basicCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate
show_debug_message("terrain select created");
depth = UI_DEPTH_WIN;

//terrain select sprites
t_sprite_index = 0; 
t_is_natural = true;
t_sprite[0] = spr_me_terrains; //neutral, includes natural terrains
t_sprite[1] = spr_me_props_green;
t_sprite[2] = spr_me_props_red;
t_sprite[3] = spr_me_props_gold;
t_sprite[4] = spr_me_props_blue;
//natural terrain re indexed
t[0] = 1;
t[1] = 4;
t[2] = 3;
t[3] = 2;
t[4] = 5;
t[5] = 0;


//cursor tracking
state =  0;
c_posx = 0;
c_posy = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initiate alarm for cursor animartion
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///key nav
//check for key active position

//      check for key delay on press
if (global.ip_up_pressed   ||
    global.ip_down_pressed ||
    global.ip_left_pressed ||
    global.ip_right_pressed){
        global.cursorKey_delay = global.cursorKey_startspeed;
        } 
//      reset key delay on release
if (global.ip_up_released   ||
    global.ip_down_released ||
    global.ip_left_released ||
    global.ip_right_released){
        alarm[0] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }

//nav key check
//**IMPORTANT** using alarm 0 for cursor animation                

// arrow key actions and juice        
if (alarm[0] = -1 ){
    switch(global.ip_nav){
        // reset all range checks if no action
        case(0):
            alarm[0] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed;
            break;
        //down
        case 2 :
            if (c_posx !=5){
                c_posy +=1;
                if (c_posy &gt;2) c_posy =0;
                }
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;
        //up
        case 8 :
            if (c_posx !=5){
                c_posy -=1;
                if (c_posy &lt;0) c_posy =2;
                }
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;
        //right
        case 6 :
            var i = 4;
            if (c_posy =2) i = 5;
            c_posx +=1;
            if (c_posx &gt; i) c_posx = 0; 
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;  
        //left
        case 4 :
            var i = 4;
            if (c_posy =2) i = 5;
            c_posx -=1;
            if (c_posx &lt; 0) c_posx = i; 
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///B Button - calncel

if(global.ip_B_pressed){
    instance_create(0,0,obj_me_cursor);
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Confirm Action
if(global.ip_A_pressed){
    //row 1: change player
    if(c_posy =0) global.me_p_sel = c_posx;
    //row 2: select property (no neutral HQ)
    if(c_posy =1 and !(c_posx =0 and c_posy =1 and global.me_p_sel =0)){
        global.me_t_sel = c_posx+1+10;
        //hard reset button input so terrain isnt set on menu exit
        global.ip_A_hold = false;
        instance_create(0,0,obj_me_cursor);
        instance_destroy();
        }
    //row 3: select natural terrain
    if(c_posy =2){
        global.me_t_sel = t[c_posx];
        global.ip_A_hold = false;
        instance_create(0,0,obj_me_cursor);
        instance_destroy();
        } 
    }

//NOT to self, impliment menu delay!
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change colours

if(global.ip_X_pressed){
    global.me_p_sel -=1;
    if (global.me_p_sel &lt; 0) global.me_p_sel = 4; 
    }
else if(global.ip_Y_pressed){
    global.me_p_sel +=1;
    if (global.me_p_sel &gt; 4) global.me_p_sel = 0; 
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Empty key nav - commed out
/*

///key nav
//check for key active position

//      check for key delay on press
if (global.ip_up_pressed   ||
    global.ip_down_pressed ||
    global.ip_left_pressed ||
    global.ip_right_pressed){
        global.cursorKey_delay = global.cursorKey_startspeed;
        } 
//      reset key delay on release
if (global.ip_up_released   ||
    global.ip_down_released ||
    global.ip_left_released ||
    global.ip_right_released){
        alarm[0] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }

//nav key check
//**IMPORTANT** using alarm 0 for cursor animation                

// arrow key actions and juice        
if (alarm[0] = -1 ){
    switch(global.ip_nav){
        // reset all range checks if no action
        case(0):
            alarm[0] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed;
            break;
        //down
        case 2 :
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;
        //up
        case 8 :
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;
        //right
        case 6 :
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;  
        //left
        case 4 :
            scr_cursorKey_juice(0,global.cursorKey_sfx);
            break;
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stuff
draw_sprite(spr_me_terrain_win,0,view_xview+228,view_yview+120);
//draw properties
if (global.me_p_sel &gt; 0){
    var i=0;
    for(i=0;i&lt;5;i++){
        draw_sprite(t_sprite[global.me_p_sel],i,view_xview+251+(i*48),view_yview+192);
        }
    }
else {
    var i=1;
    for(i=1;i&lt;5;i++){
        draw_sprite(t_sprite[global.me_p_sel],i,view_xview+251+(i*48),view_yview+192);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw curosr
draw_sprite(spr_basicCursor,global.cursorFrameIndex,view_xview+251+c_posx*48,view_yview+144+c_posy*48);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
