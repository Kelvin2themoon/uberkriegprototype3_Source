<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_purpleCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate

//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position
x = global.posX*24;
y = global.posY*24;



//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 2*24;

//used to id if mouse will scroll
mscroll = false;

//smoke variables
rounds = 1; //number of times cofx can be activated
range  = 0; //range, set via syscom













</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse navigate variables
mScroll_on = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
image_index = global.cursorFrameIndex




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view control


// check for boarders and move 

if ( view_xview[0] &gt; x - view_border and global.canScroll_x) view_xview[0] -= view_speed;

if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24 and global.canScroll_x) view_xview[0] += view_speed;

if ( view_yview[0] &gt; y - view_border and global.canScroll_y) view_yview[0] -= view_speed;

if ( view_yview[0] + view_hport[0] &lt; y + view_border+24 and global.canScroll_y) view_yview[0] += view_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///execute at target location
//check for mouse &amp; keayboard event
if( global.ip_A_pressed or (mouse_check_button_pressed(mb_right) and mouse_x div 24 = global.posX and mouse_y div 24 = global.posY)){
    //check in bound
    if (scr_inBound(global.posX,global.posY)){
        if (rounds &gt; 0){
            //make the smokes
            var ix = -range;
            var iy = -range;
            rounds -= 1;
            
            //makes the loops
            for( ix = -range ; ix &lt;= range ; ix++){
                for(iy = -range ; iy &lt;= range ; iy++){
                    if( abs(ix) + abs(iy) &lt;= range){
                        //check inbound then set to terrain isSmoke on
                        if( scr_inBound(global.posX+ix,global.posY+iy) ){
                            //check for unit
                            if( obj_map.units[global.posX+ix,global.posY+iy] != 0 ) {
                                with(obj_map.units[global.posX+ix,global.posY+iy]){
                                    isDisrupted = true;
                                    state = "exhaust" ;
                                    if( global.P_Turn.CO.COP_on ) hp -=  global.P_Turn.CO.COP_DisruptDamage;
                                    else if ( global.P_Turn.CO.SCOP_on ) hp -=  global.P_Turn.CO.SCOP_DisruptDamage;
                                    }    
                                }
                            }
                        }
                    }
                }
            }
        //netowrk mode
        if global.net_mode = 2{
            ds_map_clear(global.map_out);
            ds_map_add(global.map_out,"scr","net_cofx_disrupt");
            ds_map_add(global.map_out,"x",global.posX);
            ds_map_add(global.map_out,"y",global.posY);
            scr_send(global.map_out,"host");
            }
        //Re-initiate UI
        if (rounds &lt;=0 )
            {
            instance_activate_object(obj_battleCursor);
            instance_activate_object(obj_miniwin);
            instance_destroy();
            }
        }
    }
      
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Navigation by arrow keys


//      check for key delay on press
if (    keyboard_check_pressed(vk_up   ) ||
        keyboard_check_pressed(vk_down ) ||
        keyboard_check_pressed(vk_left ) ||
        keyboard_check_pressed(vk_right) )
        {
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
//      reset key delay on release
if (    keyboard_check_released(vk_up   ) ||
        keyboard_check_released(vk_down ) ||
        keyboard_check_released(vk_left ) ||
        keyboard_check_released(vk_right) )
        {
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
// arrow key actions and juice        
if (alarm[1] = -1 )
    {
    switch(keyboard_key)
        {
        case(vk_nokey):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        
        case vk_up :
            //check valid move option
            if (scr_inBound(global.posX,global.posY -1))
                {
                global.posY -=1;
                y = 24*global.posY;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            break;
        
        case vk_down :
        //check valid move option
            if (scr_inBound(global.posX,global.posY +1))
                {
                global.posY +=1;
                y = 24*global.posY;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            break;

        
        case vk_left :
            //check valid move option
            if (scr_inBound(global.posX-1,global.posY))
                {
                global.posX -=1;
                x = 24*global.posX;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            break;
                    
        case vk_right :
            //check valid move option
            if (scr_inBound(global.posX+1,global.posY))
                {
                global.posX +=1;
                x = 24*global.posX;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            break; 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigate by mouse commented out
//positions to check
/*
var mousecheck_pos_x = mouse_x div 24 ;
var mousecheck_pos_y = mouse_y div 24 ;

if mouse_check_button_pressed(mb_left)
    {
    //check map bounderies
    if (scr_inBound(mousecheck_pos_x,mousecheck_pos_y))
        {
        //update globals
        global.posX = mousecheck_pos_x
        global.posY = mousecheck_pos_y
        //update position
        x = mousecheck_pos_x*24;
        y = mousecheck_pos_y*24;
        mscroll = true;
        }
    }
//turn mscrol off
//mouse_check_button_released(mb_left) mscroll = false;

//scolling
if( mouse_check_button(mb_left)
and (mousecheck_pos_x != global.posX or mousecheck_pos_y != global.posY)
and scr_inBound(mousecheck_pos_x,mousecheck_pos_y))
    {
    //update globals
    global.posX = mousecheck_pos_x
    global.posY = mousecheck_pos_y
    //update position
    x = mousecheck_pos_x*24;
    y = mousecheck_pos_y*24;
    }

        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigate by mouse- click and drag
if (mouse_check_button_pressed(mb_left)){
    var mpx = mouse_x div 24 ;//mpuse position X
    var mpy = mouse_y div 24 ;//mouse position Y
    
    if (scr_inBound(mpx,mpy)){
        //move cursor
        x = mpx*24;
        y = mpy*24;
        global.posX = mpx;
        global.posY = mpy;
        //juice
        scr_cursorKey_juice(1,global.cursorKey_sfx);
        //initiate grabby
        mScroll_on = true;
        xs = window_mouse_get_x();
        ys = window_mouse_get_y(); 
        }
    }
    
if (mouse_check_button_released(mb_left)){
    mScroll_on = false;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse scrolling
    
    var vMod = 1;
    if global.window_size = 2 vMod = 2;
    if window_get_fullscreen() vMod=(display_get_width() / view_wview[0]) ;

 if (mScroll_on){
    if (global.canScroll_x)
        {
        xe= window_mouse_get_x();
        view_xview[0] += (xs-xe) div vMod;
        xs = xe;
        }
    if (global.canScroll_y)
        {
        ye= window_mouse_get_y();
        view_yview[0] += (ys-ye) div vMod;
        ys = ye;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update miniwin targets

global.terrain_check = obj_map.terrains[x div 24,y div 24];
global.unit_check = obj_map.units[x div 24, y div 24];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw curosr and pointer

//draw smoke range
scr_draw_radioAssist(global.posX,global.posY,range,spr_rangeAssist);
//draw curosr
draw_self();
//draw Mouse
//draw_sprite(spr_mousePointer,global.P_Turn.number - 1, mouse_x, mouse_y);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw mouse
if mScroll_on 
    draw_sprite(spr_mouseGrabber,global.P_Turn.number-1,mouse_x,mouse_y);

else if  (mouse_x &gt; x and mouse_x &lt; x+24 and mouse_y &gt; y and mouse_y &lt; y+24){
    draw_sprite(spr_mousePointer,global.P_Turn.number-1,mouse_x,mouse_y);
    draw_text(mouse_x +12, mouse_y+12, "Right click to deploy");
    }
else{
    draw_sprite(spr_mouseSlapper,global.P_Turn.number-1,mouse_x,mouse_y);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
