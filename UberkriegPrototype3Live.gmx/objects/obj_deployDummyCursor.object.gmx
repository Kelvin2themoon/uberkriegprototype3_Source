<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blueCursor</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate

//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position
x = global.posX*24;
y = global.posY*24;

if global.mapW &lt;=32 global.canScroll_x = false;
if global.mapH &lt;=18 global.canScroll_y = false;


//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 2*24;

cursor_icon = 0;

isOnGlobalRadioCheck = false;
checking_move_range = false;
checking_attack_range = false;
fast_scroll_on = false;

//mouse control, open menue click delay switch variable, uses alarm 2
menu_ok = false;
//mouse control, pause screen scroll after exeting, usue alarm 3 
menuExitDelay = false;
//mouse control, for switching to move cursor
move_ready = false;             //aswitchmous press and release
move_ready_count = 0;           //counter
mover_ready_threshold = 3;     //mover ready after count

//booleran for can deploy graphic
can_mouse_deploy = false;
can_mouse_hide = false;

//used to id if mouse will scroll
mscroll = 0;
dmscroll = -1;

//unit radio check variables ( for drawing Radio Assist)
draw_radioAssist = false;
MouseOver_unit = 0;
radioAssist_range = 0;
radioAssist_sprite = spr_radioAssist_gold;

//attack range check target
attack_range_check_unit = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///radio assist variables

c_radioAssist_on = false;
c_radioAssist_range = 0;
c_radioAssist_sprite = -1;

m_radioAssist_on = false;
m_radioAssist_range = 0;
m_radioAssist_sprite = -1;
m_radioAssist_target = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse navigate variables
mScroll_on = false;

mpx = mouse_x div 24;
mpy = mouse_y div 24;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clicking whikle in no deploy zones
click = false;
click_delay = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return menuExitDelay = false
menuExitDelay = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return menu_ok to false 
menu_ok = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate and set global pos
image_index = global.cursorFrameIndex;
//set pos
global.posX = x div 24 ;
global.posY = y div 24 ;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigation

//      check for key delay on press
if (global.ip_up_pressed   ||
    global.ip_down_pressed ||
    global.ip_left_pressed ||
    global.ip_right_pressed){
        global.cursorKey_delay = global.cursorKey_startspeed;
        }
        
//      reset key delay on release
if (global.ip_up_released   ||
    global.ip_down_released ||
    global.ip_left_released ||
    global.ip_right_released){
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
        
        
// arrow key actions and juice        
if (alarm[1] = -1 )
    {
    switch(global.ip_nav)
        {
        case(0):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            //if (isOnGlobalRadioCheck = false and !checking_attack_range) scr_rangeCheck_reset();
            break;
        
        case 8 :
            if (fast_scroll_on and global.posY &gt; 0)
                {
                y -= 24 ;
                if global.canScroll_y view_yview -= 24;
                } 
            
            else
                {
                if ( global.posY &gt; 0 ) y = y  - 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                //click = true;
               // alarm[4] = click_delay;
               //if sprite_index = spr_redCursor image_index = 2; 
                if (isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false)  scr_rangeCheck_reset();
                }
            break;
        
        case 2 :
            if ( global.posY &lt; global.mapH - 1  and fast_scroll_on )
                {
                y += 24 ;
                if global.canScroll_y view_yview += 24;
                }
            else
                {
                if ( global.posY &lt; global.mapH - 1 ) y = y  + 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                //click = true;
                //alarm[4] = click_delay;
                //if sprite_index = spr_redCursor image_index = 2; 
                if (isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false) scr_rangeCheck_reset();
                }    
            break;
        
        case 4 :
            if ( global.posX &gt; 0 and fast_scroll_on )
                {
                x -= 24 ;
                if global.canScroll_x view_xview -= 24 ;
                }
            
            else
                {
                if ( global.posX &gt; 0 ) x = x  - 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                //alarm[4] = click_delay;
                //click = true;
                //if sprite_index = spr_redCursor image_index = 2; 
                if ( isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false ) scr_rangeCheck_reset();
                }
            break;  
                    
        case 6 :
            if ( global.posX &lt; global.mapW - 1 and fast_scroll_on )
                {      
                x += 24 ;
                if global.canScroll_x view_xview +=24 ;  
                }
            
            else
                {
                if ( global.posX &lt; global.mapW - 1 ) x = x  + 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                //click = true;
                //alarm[4] = click_delay;
                //if sprite_index = spr_redCursor image_index = 2; 
                if (isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false) scr_rangeCheck_reset();      
                }
            break;
        }

    }
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view control

// check for boarders and move 

        if ( view_xview[0] &gt; x - view_border and global.canScroll_x) view_xview[0] -= view_speed;
        
        if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24 and global.canScroll_x) view_xview[0] += view_speed;

        if ( view_yview[0] &gt; y - view_border and global.canScroll_y) view_yview[0] -= view_speed;
        
        if ( view_yview[0] + view_hport[0] &lt; y + view_border+24 and global.canScroll_y) view_yview[0] += view_speed;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigate by mouse




if (mouse_check_button_pressed(mb_left)){

    var mpx = mouse_x div 24 ;//mpuse position X
    var mpy = mouse_y div 24 ;//mouse position Y
    if (scr_inBound(mpx,mpy)){
        //move cursor
        x = mpx*24;
        y = mpy*24;
        global.posX = mpx;
        global.posY = mpy;
        //juice
        scr_cursorKey_juice(1,global.cursorKey_sfx);
        //initiate grabby
        mScroll_on = true;
        xs = window_mouse_get_x();
        ys = window_mouse_get_y(); 
        }
    }
if (mouse_check_button_released(mb_left)){
    mScroll_on = false;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse scrolling
    
    var vMod = 1;
    if global.window_size = 2 vMod = 2;
    if window_get_fullscreen() vMod=(display_get_width() / view_wview[0]) ;

 if (mScroll_on){
    if (global.canScroll_x){
        xe= window_mouse_get_x();
        view_xview[0] += (xs-xe) div vMod;
        xs = xe;
        }
    if (global.canScroll_y){
        ye= window_mouse_get_y();
        view_yview[0] += (ys-ye) div vMod;
        ys = ye;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse mid

if mouse_check_button_pressed(mb_middle){
    var mox = mouse_x div 24 ;//mpuse position X
    var moy = mouse_y div 24 ;//mouse position Y
    if (scr_inBound(mox,moy)){
        scr_rangeCheck_reset();
        //check for property
        if object_is_ancestor(obj_map.terrains[mox,moy].object_index, obj_property){
            scr_updateLocalRadio(obj_map.terrains[mox,moy]);
            isOnGlobalRadioCheck = true;
            global.Mouse_control_tool_tip_text="middle click to check property radio"
            }
        
        // else if no units exsist    
        else
            {
            scr_globalRadioCheck();
            isOnGlobalRadioCheck = true; 
            }
        mScroll_on= true;
         //initiate scrolling Variables
         xs = window_mouse_get_x();
         ys = window_mouse_get_y();  
        }
    }
        
if  mouse_check_button_released(mb_middle)
    {
    mScroll_on= false; 
    isOnGlobalRadioCheck = false;
    scr_rangeCheck_reset();
    
    //reset unit radio check if applicable
    //if obj_map.units[global.posX, global.posY] !=0
    //scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open System, deploy menu,  start unit command, enemy or idle unit move range check


if ( global.ip_A_pressed and menuExitDelay = false and scr_inBound(global.posX,global.posY)){
    //check if terrain is open and visible
    if (obj_map.units[global.posX,global.posY] = 0 and obj_map.terrains[global.posX,global.posY].isObservable){
            //open syscom decoy
            instance_create(x+24,y,obj_syscom_dummy);
            //Open Deploy dummy menu!
            instance_destroy(obj_deployDummyCursor);
            }
    //else unit exsist
    else if (obj_map.units[global.posX,global.posY] != 0){
        var target_unit = obj_map.units[global.posX,global.posY];
        //if unit is ally
        if (target_unit.team = global.P_Turn.team and !target_unit.isHidden and global.P_Turn.CO.rounds &gt; 0){
            global.target_unit = target_unit; // set to global acton can take place in syscom_execute
            instance_create(x+24,y,obj_syscom_hide);
            instance_destroy();
            }
        //if enemy unit is visible do move check
        else if (target_unit.team != global.P_Turn.team ){           
            //switch to enemy move range check cursor
            //scr_attack_rance_check(target_unit);
            scr_updateLocalMove(target_unit);
            checking_move_range = true;
            } 
        }
    }
//on release
if ( global.ip_A_released ){
    scr_rangeCheck_reset();
    checking_move_range = false;
    //reset unit radio check if applicable
    if( obj_map.units[global.posX, global.posY] !=0 ) scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cursor click animation

//reset icon
cursor_icon = -1;

//check if target is visible and no unit is present 
if (obj_map.terrains[global.posX,global.posY].isVisible and obj_map.units[global.posX,global.posY] = 0){
    //set Deploy Icon to variable called in DRAW 
    if (global.cursorFrame == 2 || global.cursorFrame == 1){
        cursor_icon = 5; 
        }
    else cursor_icon = -1;
        
    //Open Deploy menu!
    if (global.ip_A_pressed and obj_map.units[global.posX,global.posY] =0){
        cursor_icon = -1;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///property and global radio test

if global.ip_Y_pressed{
    scr_rangeCheck_reset();
    //check for property
    if object_is_ancestor(obj_map.terrains[global.posX,global.posY].object_index, obj_property){
        scr_updateLocalRadio(obj_map.terrains[global.posX,global.posY]);
        isOnGlobalRadioCheck = true;
        }
    // else if no units exsist    
    else{
        scr_globalRadioCheck();
        isOnGlobalRadioCheck = true; 
        } 
    }
    
if global.ip_Y_released{
    isOnGlobalRadioCheck = false;
    scr_rangeCheck_reset();
    //reset unit radio check if applicable
    //if obj_map.units[global.posX, global.posY] !=0
    //scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update global terrain and unit checker
// to be used with miniwin. aux stats and intel, and various unit actions
global.terrain_check = obj_map.terrains[global.posX,global.posY];
global.unit_check = obj_map.units[global.posX,global.posY];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// B - attack range and quick view move
if global.ip_B_pressed{
    //attack Range check if over unit
    if (obj_map.units[global.posX, global.posY] != 0){
        if obj_map.units[global.posX, global.posY].isObservable{
            if !obj_map.units[global.posX, global.posY].isMovAgn{
                //do move range check
                checking_attack_range = true;
                scr_attack_rance_check(obj_map.units[global.posX, global.posY]);
                }
            }
        }
    else if( !checking_attack_range )fast_scroll_on = true;    
    }

if (global.ip_B_released or mouse_check_button_released(mb_right)){
    fast_scroll_on = false;
    checking_attack_range = false;
    scr_rangeCheck_reset();
    //reset unit radio check if applicable
    //if obj_map.units[global.posX, global.posY] !=0
    //scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Controls


//reset can mouse deploy
can_mouse_deploy = false;
can_mouse_hide = false;

mpx = mouse_x div 24 ;
mpy = mouse_y div 24 ;

//check for deploy
if (scr_inBound(mpx,mpy)){
    if (obj_map.terrains[mpx,mpy].isVisible){
        //if location is empty, clear for dummy deploy    
        if obj_map.units[mpx,mpy] = 0 can_mouse_deploy = true;
        //check location accupied by ally unit, ok for hide! 
        else if obj_map.units[mpx,mpy].team = global.P_Turn.team  can_mouse_hide = true;
        }
    }

//left click    
if(mouse_check_button_pressed(mb_left) and !menuExitDelay){
    move_ready = false;
    mousePosX = mouse_x div 24
    mousePosY = mouse_y div 24
    if (scr_inBound(mousePosX,mousePosY)){
        //change curosr position
        x = (mousePosX)*24;
        y = (mousePosY)*24;
        //update globale
        global.posX = x div 24;
        global.posY = y div 24;
        }
        //turn off deploy icon
        cursor_icon = -1;
        //check unit mov
        var unit = obj_map.units[global.posX,global.posY];
        if (unit != 0){
            if (unit.isObservable){
                scr_updateLocalMove(unit);
                }
            }
        //local property radio chech if terrain i sproperty
        if (object_is_ancestor(obj_map.terrains[global.posX,global.posY].object_index,obj_property)){
            scr_rangeCheck_reset();
            scr_updateLocalRadio(obj_map.terrains[global.posX,global.posY]);
            isOnGlobalRadioCheck = true;
            }
        else if (unit = 0){
            //turn on global radio check
            scr_globalRadioCheck();
            isOnGlobalRadioCheck = true;
            }
        //set alarm for releas delay for deploy and syscom menus
        alarm[2] = 10;
        menu_ok = true;
    }

/*    
if(mouse_check_button(mb_left) and !menuExitDelay){
    //turn off deploy icon
    cursor_icon = -1;
    mousePosX = mouse_x div 24
    mousePosY = mouse_y div 24
    if (scr_inBound(mousePosX,mousePosY) ){
        //change curosr position
        x = (mousePosX)*24;
        y = (mousePosY)*24;
        global.posX = x div 24;
        global.posY = y div 24;
        }
    }
*/

if(mouse_check_button_released(mb_left)){
    isOnGlobalRadioCheck = false;
    scr_rangeCheck_reset();
    //reset unit radio check if applicable
    //if obj_map.units[global.posX, global.posY] !=0
    //scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    //reset move ready
    move_ready = false;
    move_ready_count=0;
    }    
    
//right click
if(mouse_check_button_pressed(mb_right) and !mouse_check_button(mb_left) and !menuExitDelay){
    mousePosX = mouse_x div 24
    mousePosY = mouse_y div 24
    global.posX = mousePosX;
    global.posY = mousePosY;
    x = mousePosX*24;
    y = mousePosY*24;
    //click
    scr_cursorKey_juice(1,global.cursorKey_sfx);
    
    var mouse_on_cursor = false;
    if (global.posX = mousePosX and global.posY = mousePosY) mouse_on_cursor = true;
    if (scr_inBound(mousePosX,mousePosY)){
        //open deploy menu
        if  (obj_map.terrains[mousePosX,mousePosY].isVisible and obj_map.units[mousePosX,mousePosY] = 0 and mscroll = 0){
            //Open Deploy menu!
            instance_create(x+24,y,obj_syscom_dummy);
            instance_destroy(obj_deployDummyCursor);   
            }
        else if (obj_map.units[mousePosX,mousePosY]!= 0){
            //if unit is ally hide
            if(obj_map.units[global.posX,global.posY].team = global.P_Turn.team and obj_map.units[global.posX,global.posY].isHidden = false and global.P_Turn.CO.rounds &gt; 0 ){
                global.target_unit = obj_map.units[global.posX,global.posY]; // set to global acton can take place in syscom_execute
                instance_create(x+24,y,obj_syscom_hide);
                instance_destroy(); 
                }
            //unit is enemy - attack range check
            else { 
                //do move range check
                checking_attack_range = true; 
                scr_attack_rance_check(obj_map.units[global.posX, global.posY]); 
                //move globals
                }
            } 
        }
    }
if(mouse_check_button_released(mb_right)){
    checking_attack_range = false;
    scr_rangeCheck_reset();
    }




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Nav radio and ranges

//check for unit radio (radio asist)
draw_radioAssist= false;
radioAssist_range = 0;
//draw RadioAssist if over visible unit
        if(scr_inBound(mpx,mpy)){
            if(obj_map.units[mpx,mpy] != 0){
                if(obj_map.units[mpx,mpy].isVisible = true){
                    MouseOver_unit = obj_map.units[mpx,mpy];
                    //check radio range
                    if(MouseOver_unit.radio != 0){
                        radioAssist_range = MouseOver_unit.radio;
                        //check for CO effect
                        with obj_CO_0   {
                            if(ownership = other.MouseOver_unit.ownership){
                                other.radioAssist_range += D2D_Radio;
                                if COP_on  other.radioAssist_range += COP_Radio;
                                if SCOP_on  other.radioAssist_range += SCOP_Radio;
                                }
                            }
                        //add mountain range
                        if(obj_map.terrains[mpx,mpy].name = "Mountain" and MouseOver_unit.radio != 0 ){
                            radioAssist_range += 2;
                            }
                        //set graphic type
                        draw_radioAssist = true;
                        if   MouseOver_unit.isStanding radioAssist_sprite = spr_radioAssist_bronze;
                        else radioAssist_sprite = spr_radioAssist_darkBlue;
                        }
                    }
                }
            }

// this fixes attack range check somhow ?????? (I dont understand, it might bite me in the but later, please send help)
/*            

it did bite me in the but later!!

if(checking_attack_range){
if(obj_map.units[global.posX, global.posY] != 0)
scr_attack_rance_check(obj_map.units[global.posX, global.posY]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///curosr Radio asist check

c_radioAssist_on = false;
c_radioAssist_sprite = -1;
c_radioAssist_range = 0;

if(scr_inBound(global.posX,global.posY)){
    if(obj_map.units[global.posX,global.posY] !=0){
        if(obj_map.units[global.posX,global.posY].isVisible){
            //switch radioAssist on
            c_radioAssist_on = true;
            //check Standing
            if (obj_map.units[global.posX,global.posY].isStanding) c_radioAssist_sprite = spr_radioAssist_bronze;
            else c_radioAssist_sprite = spr_radioAssist_darkBlue;
            //check range
            c_radioAssist_range = scr_getUnitRadioRange(obj_map.units[global.posX,global.posY] ,obj_map.terrains[global.posX,global.posY]);
            }
        }
    }
/*    
//mouse version
m_radioAssist_on = false;
m_radioAssist_sprite = -1;
m_radioAssist_range = 0;


if(scr_inBound(mox,moy))
    {
    if(obj_map.units[mox,moy] !=0)
        {
        if(obj_map.units[mox,moy].isObservable)
            {
            //switch radioAssist on
            m_radioAssist_on = true;
            //check Standing
            if (obj_map.units[mox,moy].isStanding) m_radioAssist_sprite = spr_radioAssist_bronze ;
            else m_radioAssist_sprite = spr_radioAssist_darkBlue;
            //check range
            m_radioAssist_range = scr_getUnitRadioRange(obj_map.units[mox,moy] ,obj_map.terrains[mox,moy]);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///finnish action if no rounds left
if (global.P_Turn.CO.rounds &lt;= 0 )
            {
            scr_exe_control_restart();
            instance_activate_object(obj_miniwin);
            instance_activate_object(obj_topwin);
            instance_destroy();
            }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///indicate no deploy
if( !obj_map.terrains[global.posX,global.posY].isVisible ) sprite_index = spr_redCursor;
else sprite_index = spr_blueCursor;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw order and animation

scr_draw_radioAssist(global.posX,global.posY,c_radioAssist_range,c_radioAssist_sprite); 
if (fast_scroll_on) draw_sprite(spr_moveCurosr,image_index,x,y); 
else draw_self();
draw_sprite(spr_cofx_charge,global.P_Turn.CO.rounds, global.posX*24, global.posY*24);





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse can hide

if can_mouse_hide draw_text(mouse_x+12,mouse_y+12,"Right click to hide");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///X
if (sprite_index = spr_redCursor) draw_sprite(spr_x,image_index,x,y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw mouse
if mScroll_on 
    draw_sprite(spr_mouseGrabber,global.P_Turn.number-1,mouse_x,mouse_y);

if  (mouse_x &gt; x and mouse_x &lt; x+24 and mouse_y &gt; y and mouse_y &lt; y+24){
    draw_sprite(spr_mousePointer,global.P_Turn.number-1,mouse_x,mouse_y);
    //check in vision range
    if sprite_index != spr_redCursor
    draw_text(mouse_x +12, mouse_y+12, "Right click to deploy");
    }
else{
    draw_sprite(spr_mouseSlapper,global.P_Turn.number-1,mouse_x,mouse_y);
    }
    
if(draw_radioAssist) scr_draw_radioAssist(mouse_x div 24, mouse_y div 24,radioAssist_range,radioAssist_sprite);    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
